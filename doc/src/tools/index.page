---
title: Spec Runner
inMenu: true
---

h2. Executing specs directly

Every RSpec context can be run directly from the command line:

<pre>
ruby path/to/my_spec.rb [options]
</pre>

This will print the results to STDOUT. Use the --help option for more details. This is
practical when you only want to run one context. If you want to run more, use the spec tool
or the Rake task.

h2. The spec command line

After you install RSpec, you should have the spec command line tool on your PATH.
This tool can be used to process several RSpec contexts in one go.

The general form of the command is

<pre>
spec [options] (FILE|DIRECTORY)+
</pre>

Any number of files and/or directories can be provided, all ruby source files
that are found are loaded. Running spec on the previous example results in:

<pre>
..................

Finished in 0.007523 seconds

4 contexts, 18 specifications, 0 failures
</pre>

Very simple and to the point. Passing specifications are indicated by a '.',
failing ones by a 'F'. Note that failure indicates a violated expectation as
well as an unexpected exception being raised.  Here's an example with a failing specification:

<pre>
$ bin/spec failing_examples/team_spec.rb   

F.

1)
<Team> should have 3 players (has 0) (Spec::Api::ExpectationNotMetError)
./failing_examples/team_spec.rb:23:in `A new team should have 3 players'

Finished in 0.000386 seconds

1 context, 2 specifications, 1 failure
</pre>

In this case, the context is named "A new team" and the specification is
named "should have 3 players". These two are concatenated on the first line of the backtrace.

h3. -v, --verbose

Using this option provides more information:

<pre>
An empty stack 
- should accept an item when sent push 
- should complain when sent top 
- should complain when sent pop  

A stack with one item 
- should accept an item when sent push 
- should return top when sent top 
- should not remove top when sent top 
- should return top when sent pop 
- should remove top when sent pop  

An almost full stack (with one item less than capacity) 
- should accept an item when sent push 
- should return top when sent top 
- should not remove top when sent top 
- should return top when sent pop 
- should remove top when sent pop  

A full stack 
- should complain on push 
- should return top when sent top 
- should not remove top when sent top 
- should return top when sent pop 
- should remove top when sent pop

Finished in 0.013635 seconds

4 contexts, 18 specifications, 0 failures
</pre>

Similar, here is a failing specification when the verbose opton is used:

<pre>
$ bin/spec failing_examples/team_spec.rb -v

A new team
- should have 3 players (FAILED - 1)
- should have no players


1)
<Team> should have 3 players (has 0) (Spec::Api::ExpectationNotMetError)
./failing_examples/team_spec.rb:23:in `A new team should have 3 players'

Finished in 0.000452 seconds

1 context, 2 specifications, 1 failure
</pre>

The spec command does double duty as documentation generation from a set of
specifications as well as running them against your code.

h3. A note on exception backtraces.

h3. -b, --backtrace

In order to make it easier to identify causes of failing specifications, RSpec will filter out
the parts of the backtrace that come from RSpec itself by default. If you wish to see them,
you can use -b or --backtrace:

<pre>
$ bin/spec failing_examples/team_spec.rb -b

F.

1)
<Team> should have 3 players (has 0) (Spec::Api::ExpectationNotMetError)
/usr/local/lib/ruby/gems/1.8/gems/rspec-0.5.4/lib/spec/api/helper/should_base.rb:33:in `fail_with_message'
/usr/local/lib/ruby/gems/1.8/gems/rspec-0.5.4/lib/spec/api/helper/have_helper.rb:13:in `method_missing'
./failing_examples/team_spec.rb:23:in `A new team should have 3 players (failing example)'
/usr/local/lib/ruby/gems/1.8/gems/rspec-0.5.4/lib/spec/runner/instance_exec.rb:9:in `instance_exec'
/usr/local/lib/ruby/gems/1.8/gems/rspec-0.5.4/lib/spec/runner/specification.rb:17:in `run'
/usr/local/lib/ruby/gems/1.8/gems/rspec-0.5.4/lib/spec/runner/context.rb:23:in `run'
/usr/local/lib/ruby/gems/1.8/gems/rspec-0.5.4/lib/spec/runner/context.rb:22:in `run'
/usr/local/lib/ruby/gems/1.8/gems/rspec-0.5.4/lib/spec/runner/context_runner.rb:50:in `run_specs'
/usr/local/lib/ruby/gems/1.8/gems/rspec-0.5.4/lib/spec/runner/context_runner.rb:49:in `run_specs'
/usr/local/lib/ruby/gems/1.8/gems/rspec-0.5.4/lib/spec/runner/context_runner.rb:41:in `run'
/usr/local/lib/ruby/gems/1.8/gems/rspec-0.5.4/bin/spec:16
/usr/local/bin/spec:18

Finished in 0.000385 seconds

1 context, 2 specifications, 1 failure
</pre>

h3. -d, --doc

Process the specifications in documentation generation mode. This will produce
an rdoc input file. For example here is the result of running spec -d on the
previous example:

<pre>
# An empty stack 
# * should accept an item when sent push 
# * should complain when sent top 
# * should complain when sent pop 
# A stack with one item 
# * should accept an item when sent push 
# * should return top when sent top 
# * should not remove top when sent top 
# * should return top when sent pop 
# * should remove top when sent pop 
# An almost full stack (with one item less than capacity) 
# * should accept an item when sent push 
# * should return top when sent top 
# * should not remove top when sent top 
# * should return top when sent pop 
# * should remove top when sent pop 
# A full stack 
# * should complain on push 
# * should return top when sent top 
# * should not remove top when sent top 
# * should return top when sent pop 
# * should remove top when sent pop
</pre>

Rdoc renders this as "this":rdoc-output/index.html.