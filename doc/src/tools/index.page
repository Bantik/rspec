---
title: Spec Runner
inMenu: true
---

h2. Executing specs directly

Every RSpec context can be run directly from the command line:

<pre>
ruby path/to/my_spec.rb [options]
</pre>

This will print the results to STDOUT. Use the --help option for more details. This is
practical when you only want to run one context. If you want to run more, use the spec tool
or the Rake task.

h2. The spec command line

After you install RSpec, you should have the spec command line tool on your PATH.
This tool can be used to process several RSpec contexts in one go.

The general form of the command is

<pre>
spec [options] (FILE|DIRECTORY)+
</pre>

Any number of files and/or directories can be provided, all ruby source files
that are found are loaded. Running spec on the previous example results in:

<pre>
bin/spec --sweet examples
{execute: ../bin/spec --sweet ../examples}
</pre>

Very simple and to the point. Passing specifications are indicated by a '.',
failing ones by a 'F'. Note that failure indicates a violated expectation as
well as an unexpected exception being raised.  Here's an example with a failing specification:

<pre>
bin/spec --sweet failing_examples/stack_spec.rb
{execute: ../bin/spec --sweet ../failing_examples/stack_spec.rb}
</pre>

In this case, the context is named "An almost full stack (with one item less than capacity)" 
and the specification is named "should return top when sent pop". These two are concatenated 
on the first line of the backtrace.

h3. -v, --verbose

Using this option provides more information:

<pre>
$ bin/spec failing_examples/team_spec.rb -v

{execute: ../bin/spec ../failing_examples/team_spec.rb -v}
</pre>

The spec command does double duty as documentation generation from a set of
specifications as well as running them against your code.

h3. -b, --backtrace

In order to make it easier to identify causes of failing specifications, RSpec will filter out
the parts of the backtrace that come from RSpec itself by default. If you wish to see them,
you can use -b or --backtrace:

<pre>
$ bin/spec failing_examples/team_spec.rb -b

{execute: ../bin/spec ../failing_examples/team_spec.rb -b}
</pre>

h3. -s, --sweet

This is enables the syntactic sugar that allows usage of should_* instead of should.*

See <notextile><a href="../documentation/underscores.html">Underscore sugar</a></notextile> for details.

h3. -d, --doc

Process the specifications in documentation generation mode. This will produce
an rdoc input file. For example here is the result of running spec -d on the
previous example:

<pre>
{includeFile: {filename: ../../../EXAMPLES.rd, processOutput: false}}
</pre>

Rdoc renders this as "this":../rdoc/files/EXAMPLES_RD.html.