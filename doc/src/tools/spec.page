---
title: Spec Runner
inMenu: true
---

h2. Executing specs directly

Every RSpec context can be run directly from the command line:

<pre>
ruby path/to/my_spec.rb [options]
</pre>

This will print the results to STDOUT. Use the --help option for more details. This is
practical when you only want to run one context. If you want to run more, use the spec tool
or the Rake task. It should also be noted that the exitcode will always be 0 when run in standalone mode.

h2. The spec command line

After you install RSpec, you should have the spec command line tool on your PATH.
This tool can be used to process several RSpec contexts in one go. 

spec will exit with the exitcode 1 if one or more specs fail.

The general form of the command is

<pre>
spec [options] (FILE|DIRECTORY)+
</pre>

Any number of files and/or directories can be provided, all ruby source files
that are found are loaded. Running spec on the previous example results in:

<pre>
bin/spec
{execute: ../bin/spec ../examples}
</pre>

Very simple and to the point. Passing specifications are indicated by a '.',
failing ones by a 'F'. Note that failure indicates a violated expectation as
well as an unexpected exception being raised.  Here's an example with a failing specification:

<pre>
bin/spec failing_examples/stack_spec.rb
{execute: ../bin/spec ../failing_examples/stack_spec.rb}
</pre>

In this case, the context is named "An almost full stack (with one item less than capacity)" 
and the specification is named "should return top when sent pop". These two are concatenated 
on the first line of the backtrace.

h2. Command line options

Additional command line options can be passed to customize the output and behaviour of RSpec.
The following options apply whether specs are run in standalone mode (by executing the .rb files directly), 
or using the spec command.

h3. -v, --verbose

Using this option tells the formatter (which by default is specdoc) to produce more verbose output:

<pre>
$ bin/spec failing_examples/team_spec.rb -v

{execute: ../bin/spec ../failing_examples/team_spec.rb -v}
</pre>

The spec command does double duty as documentation generation from a set of
specifications as well as running them against your code.

h3. -f, --format [specdoc|rdoc]

Specify the output format. Most formats will produce some form of "testdox":http://agiledox.sourceforge.net/
output. The --verbose and --dry-run options may also affect the output format.

For example, by setting the formatter to rdoc, we can output the kind of input that RDoc
needs to produce something like "this":../rdoc/files/EXAMPLES_rd.html 
<pre>
$ bin/spec failing_examples/team_spec.rb -f rdoc

{execute: ../bin/spec ../failing_examples/team_spec.rb -f rdoc}
</pre>

h3. -d, --dry-run

This option tells RSpec not to execute the specs, but they are still being parsed.
This can be useful when generating "testdox":http://agiledox.sourceforge.net/ documents

h3. -b, --backtrace

In order to make it easier to identify causes of failing specifications, RSpec will filter out
the parts of the backtrace that come from RSpec itself by default. If you wish to see them,
you can use -b or --backtrace:

<pre>
$ bin/spec failing_examples/team_spec.rb -b

{execute: ../bin/spec ../failing_examples/team_spec.rb -b}
</pre>
