---
title: Expectations
---
h2. Deprecation

%{color:red; font-weight:bold; font-size:1.2em}Most of the Expectations described on this page have been DEPRECATED and REPLACED with new syntax based on Expression Matchers.%

%{color:red; font-weight:bold; font-size:1.2em}Please see "Spec::Matchers":../rdoc/index.html for documentation about the new syntax.%

%{color:red; font-weight:bold; font-size:1.2em}Read "Upgrade":../upgrade.html for more info on why we are making this change.%

Generally, any expectation that looks like ...

<ruby>
#before - deprecated
target.should_x expected
target.should_not_x expected
</ruby>

... will be replaced by ...

<ruby>
#after - 0.8+ syntax
target.should x(expected)
target.should_not x(expected)
</ruby>

Exceptions to this are the expectations that use operators, like <code>should ==</code>
and <code>should_be ></code>. These are all noted below.



h2. Expectations

When RSpec executes specifications, it defines a method <code>should</code> on every object in the system. This <code>should</code> method is your entry to the magic of RSpec.

Almost all expectation forms have a corresponding negated form. It is listed when it is supported and, unless otherwise stated, is met when ever the non-negated form would be violated.

h2. General

h3. Equality and Identity

%{color:red;font-weight:bold;font-size:1.2em}DEPRECATED. See "Spec::Matchers":../rdoc/index.html% 

RSpec now delegates equality evaluation directly to ruby's methods and operators:

<ruby>
actual.should_equal <value> #passes if actual.equal? <value>
actual.should_not_equal <value> #passes if !actual.equal? <value>

actual.should_eql <value> #passes if actual.eql? <value>
actual.should_not_eql <value> #passes if !actual.eql? <value>

actual.should == <value> #passes if actual == <value> #NOT deprecated
actual.should_not == <value> #passes if actual != <value> #NOT deprecated
#Warning: there is no support for actual.should != <value>, use actual.should_not == <value> instead
</ruby>

We recognize that this does not align with assert_equal in Test::Unit, and that this may feel awkward for those of you experienced with either Test::Unit or previous releases of RSpec. We chose to make this change because there was some confusion over the meaning of should_equal and should_be and we decided that it would be less confusing in the long run if should_equal aligns with the Ruby language.

Please see "http://www.ruby-doc.org/core/classes/Object.html#M001057":http://www.ruby-doc.org/core/classes/Object.html#M001057 for more information on the  implications of equal?, eql? and ==.

h3. Floating Point Comparison

%{color:red;font-weight:bold;font-size:1.2em}DEPRECATED. See "Spec::Matchers":../rdoc/index.html% 

<ruby>
actual.should_be_close <value>, <tolerance>
actual.should_not_be_close <value>, <tolerance>
</ruby>

The actual object is compared to <code>value</code>. If they differ by more that <code>tolerance</code>, <code>ExpectationNotMetError</code> is raised. In the negated case, <code>ExpectationNotMetError</code> is raised if they differ by less than <code>tolerance</code>.

<ruby>
actual.should_be_close 27.35, 0.05
</ruby>

h3. Arbitrary Predicate

%{color:red;font-weight:bold;font-size:1.2em}DEPRECATED. See "Spec::Matchers":../rdoc/index.html% 

<ruby>
actual.should_predicate [optional args]
actual.should_be_predicate [optional args]
actual.should_not_predicate [optional args]
actual.should_not_be_predicate [optional args]
</ruby>

The message <code>predicate?</code> is sent to <code>actual</code> with any supplied arguments. If the result is <code>false</code>, <code>ExpectationNotMetError</code> is raised.

For example:

<ruby>
container.should_include('a') => container.include?('a')
container.should_be_empty => container.empty?
</ruby>

h3. Arbitrary ownership 

%{color:red;font-weight:bold;font-size:1.2em}DEPRECATED. See "Spec::Matchers":../rdoc/index.html% 

<ruby>
actual.should_have_<anything> [optional args] 
</ruby>

The message <code>has_<anything>?</code> is sent to <code>actual</code> with any supplied arguments. If the result is <code>false</code>, <code>ExpectationNotMetError</code> is raised.

For example:

<ruby>
hash.should_have_key(:key) => hash.has_key?(:key)
</ruby>

h3. Arbitrary Operators

%{color:red;font-weight:bold;font-size:1.2em}These are NOT deprecated. See "Spec::Matchers":../rdoc/index.html% 

<ruby>
actual.should_be < value
actual.should_be <= value
actual.should == value
actual.should_be >= value
actual.should_be > vale

actual.should_not == value
</ruby>

The operators are sent to <code>actual</code> with supplied arguments. Note that <code>should !=</code> is not supported, but the same effect can be achieved with <code>should_not ==</code>.

h3. Pattern Matching

%{color:red;font-weight:bold;font-size:1.2em}DEPRECATED. See "Spec::Matchers":../rdoc/index.html% 

<ruby>
actual.should_match <regexp>
actual.should =~ <regexp> #NOT deprecated
actual.should_not_match <regexp>
</ruby>

The <code>actual</code> is matched against <code>regexp</code>. An <code>ExpectationNotMetError</code> is raised if the match fails.

h2. Class/Type

h3. Direct Instance

%{color:red;font-weight:bold;font-size:1.2em}DEPRECATED. See "Spec::Matchers":../rdoc/index.html% 

<ruby>
actual.should_be_an_instance_of <class>
actual.should_not_be_an_instance_of <class>
</ruby>

An <code>ExpectationNotMetError</code> is raised if <code>actual</code> is not or is, respectively, an direct instance of <code>class</code>. As expected this correlates to <code>actual.instance_of?  class</code>.

h3. Ancestor Class

%{color:red;font-weight:bold;font-size:1.2em}DEPRECATED. See "Spec::Matchers":../rdoc/index.html% 

<ruby>
actual.should_be_a_kind_of <class>
actual.should_not_be_a_kind_of <class>
</ruby>

As above, but uses <code>actual.kind_of? class</code>: checking whether <code>class</code> is the direct class of <code>actual</code>, or an ancestor of <code>actual</code>'s direct class.

h3. Duck Type

%{color:red;font-weight:bold;font-size:1.2em}DEPRECATED. See "Spec::Matchers":../rdoc/index.html% 

<ruby>
actual.should_respond_to <symbol>
actual.should_not_respond_to <symbol>
</ruby>

Uses <code>actual.respond_to?(symbol)</code> to check whether <code>symbol</code> is the name of a message that <code>actual</code> understands.

h2. Procs

h3. Raising

%{color:red;font-weight:bold;font-size:1.2em}DEPRECATED. See "Spec::Matchers":../rdoc/index.html% 

<ruby>
proc.should_raise [<exception>], [<message>|<regexp>]
proc.should_not_raise [<exception>], [<message>|<regexp>]
</ruby>

Checks that <code>proc</code> causes the named exception to be raised or not (possibly with a specific message or regexp to match against the message). The latter is actually one of two cases: some other exception is raised, or no exception is raised. Typically the <code>proc</code> is created in place using <code>lambda</code>. For example:

<ruby>
lambda { 3 / 0 }.should_raise ZeroDivisionError
</ruby>

There is a more general form as well.

<ruby>
proc.should_raise
proc.should_not_raise
</ruby>

These forms don't worry about what exception is raised (or not). All they are concerned with is that some except was raised, or that no exception was.

h3. Throwing

%{color:red;font-weight:bold;font-size:1.2em}DEPRECATED. See "Spec::Matchers":../rdoc/index.html% 

<ruby>
proc.should_throw <symbol>
proc.should_not_throw <symbol>
</ruby>

Similar to the above, but checks that <code>symbol</code> is thrown from within <code>proc</code>, or not. The latter is actually one of two cases: some other symbol is thrown, or no symbol is thrown.

<ruby>
proc.should_not_throw
</ruby>

This form is more specific.  It checks that no symbol is thrown from within <code>proc</code>.

h3. Changing

%{color:red;font-weight:bold;font-size:1.2em}DEPRECATED. See "Spec::Matchers":../rdoc/index.html% 

<ruby>
proc.should_change(receiver, :message)                => #fails if no change
proc.should_change(receiver, :message).by(value)      => #fails if changed by other value
proc.should_change(receiver, :message).to(new_value)  => #fails if changed to a different value
proc.should_change(receiver, :message).from(old_value).to(new_value)
                                         =>#fails if before OR after values are not as expected
</ruby>

Calls <code>receiver.message</code> before and after the proc is executed and checks that
the value has changed per the various forms.

This will also accept a block:

<ruby>
proc.should_change{ #arbitrary block }                => #fails if no change
proc.should_change{ #arbitrary block }.by(value)      => #fails if changed by other value
proc.should_change{ #arbitrary block }.to(new_value)  => #fails if changed to a different value
proc.should_change{ #arbitrary block }.from(old_value).to(new_value)
                                         =>#fails if before OR after values are not as expected
</ruby>

h2. Collections

h3. Containment

%{color:red;font-weight:bold;font-size:1.2em}DEPRECATED. See "Spec::Matchers":../rdoc/index.html% 

<ruby>
actual.should_include <object>
actual.should_not_include <object>
</ruby>

This is simply a specific case of the arbitrary predicate form. It uses <code>actual.include?(object)</code> and raises an <code>ExpectationNotMetError</code> if that returns false. 

h3. Size

The remaining collection forms are a little more involved. They rely on two things:

# <code>actual</code> responds to the message <code>things</code> by returning an object.
# The returned object responds to either <code>length</code> or <code>size</code>, which return a number that is a measure of size. 

Currently <code>length</code> is used if is appropriate, otherwise <code>size</code> is attempted.

h3. Exact Size

%{color:red;font-weight:bold;font-size:1.2em}DEPRECATED. See "Spec::Matchers":../rdoc/index.html% 

<ruby>
actual.should_have(<number>).things
</ruby>

The <code>things</code> of <code>actual</code> has a length/size of exactly <code>number</code>.

h3. Lower Bound

%{color:red;font-weight:bold;font-size:1.2em}DEPRECATED. See "Spec::Matchers":../rdoc/index.html% 

<ruby>
actual.should_have_at_least(<number>).things
</ruby>

The <code>things</code> of <code>actual</code> has a length/size of no less than <code>number</code>.

h3. Upper Bound

%{color:red;font-weight:bold;font-size:1.2em}DEPRECATED. See "Spec::Matchers":../rdoc/index.html% 

<ruby>
actual.should_have_at_most(<number>).things
</ruby>

The <code>things</code> of <code>actual</code> has a length/size of no more than <code>number</code>.

h3. Arbitrary Block

%{color:red;font-weight:bold;font-size:1.2em}DEPRECATED. See "Spec::Matchers":../rdoc/index.html% 

<ruby>
actual.should_satisfy {|arg| ...}
actual.should_not_satisfy {|arg| ...}
</ruby>

The supplied block is evaluated, passing <code>actual</code> as the sole argument. If the block evaluates to <code>false</code>, <code>ExpectationNotMetError</code> is raised.

<ruby>
actual.should_satisfy {|arg| arg > 0}
</ruby>

