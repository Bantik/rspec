---
title: Spec Runner
inMenu: true
---

h2. Executing specs directly

Every RSpec context can be run directly from the command line:

<pre>
$ ruby path/to/my_spec.rb [options]
</pre>

This will print the results to STDOUT. Use the --help option for more details. This is
practical when you only want to run one context. If you want to run more, use the spec tool
or the Rake task.

h2. The spec command line

After you install RSpec, you should have the <tt>spec</tt> command line tool on your PATH.
This tool can be used to process several RSpec contexts in one go. 

Any number of files, directories and shell globs can be provided, all ruby source files
that are found are loaded. Running spec on the previous example results in:

<pre>
$ spec examples

{execute: ruby docspec.rb examples}
</pre>

Very simple and to the point. Passing specifications are indicated by a '.',
failing ones by a 'F'. Note that failure indicates a violated expectation as
well as an unexpected exception being raised.  Here's an example with a failing specification:

<pre>
$ spec failing_examples/stack_spec.rb

{execute: ruby docspec.rb failing_examples/team_spec.rb}
</pre>

h2. Command line options

When you run <tt>spec</tt> with the <tt>--help</tt> option it prints a help message:

<pre>
$ spec --help

{execute: ruby docspec.rb --help}
</pre>

The command line options can be passed to customize the output and behaviour of RSpec.
The options apply whether specs are run in standalone mode (by executing the .rb files directly with ruby), 
or using the spec command.
