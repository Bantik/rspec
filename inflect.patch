Index: rspec/spec/spec/matchers/have_spec.rb
===================================================================
--- rspec/spec/spec/matchers/have_spec.rb	(revision 3192)
+++ rspec/spec/spec/matchers/have_spec.rb	(working copy)
@@ -47,6 +47,25 @@
   end
 end
 
+describe 'should have(1).item when Inflector is defined' do
+  include HaveSpecHelper
+  
+  before do
+    unless Object.const_defined?(:Inflector)
+      class Inflector
+        def self.pluralize(string)
+          string.to_s + 's'
+        end
+      end
+    end
+  end
+  
+  it 'should pluralize the collection name' do
+    owner = create_collection_owner_with(1)
+    owner.should have(1).item
+  end
+end
+
 describe "should have(n).items where result responds to items but returns something other than a collection" do
   it "should provide a meaningful error" do
     owner = Class.new do
Index: rspec/spec/spec/spec_classes.rb
===================================================================
--- rspec/spec/spec/spec_classes.rb	(revision 3192)
+++ rspec/spec/spec/spec_classes.rb	(working copy)
@@ -51,6 +51,9 @@
           [1]
         end
         
+        def items
+          @items_in_collection_with_size_method
+        end
       end
 
       class HandCodedMock
Index: rspec/lib/spec/matchers/have.rb
===================================================================
--- rspec/lib/spec/matchers/have.rb	(revision 3192)
+++ rspec/lib/spec/matchers/have.rb	(working copy)
@@ -17,6 +17,7 @@
     
       def method_missing(sym, *args, &block)
         @collection_name = sym
+        @plural_collection_name = Inflector.pluralize(sym.to_s) if Object.const_defined?(:Inflector)
         @args = args
         @block = block
         self
@@ -25,6 +26,8 @@
       def matches?(collection_owner)
         if collection_owner.respond_to?(@collection_name)
           collection = collection_owner.send(@collection_name, *@args, &@block)
+        elsif (@plural_collection_name && collection_owner.respond_to?(@plural_collection_name))
+          collection = collection_owner.send(@plural_collection_name, *@args, &@block)
         elsif (collection_owner.respond_to?(:length) || collection_owner.respond_to?(:size))
           collection = collection_owner
         else
