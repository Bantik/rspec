---
title: Views
---
h2. Spec::Rails - Specifying Views

View Specs live in $RAILS_ROOT/spec/views/.

Spec::Rails supports the specification of views in complete isolation from their controllers.
This allows you to spec and write your views even before their controllers exist,
or before the related actions have been developed. It also means that bugs introduced
into controllers will not cause view specs to fail.

As noted in the "introduction":index.html, these are great benefits
but they could hide bugs that exist in the interaction between a controller and its
view. We strongly recommend combining these isolated view specs with some sort of
high level "integration":integration.html testing.

Here are some of the methods available to you, but see "Spec::Rails::Expectations":../../../rdoc-rails/index.html for more detail.

h2. Conveniences

h3. assigns

Use assigns[:key] to set values to be used in the spec. We highly recommend that
you exploit the mock framework here rather than providing real model objects
in order to keep the view specs isolated from changes to your models.

<ruby>
article = mock_model(Article)
article.should_receive(:author).and_return("Joe")
article.should_receive(:text).and_return("this is the text of the article")
assigns[:article] = article
assigns[:articles] = [article]
</ruby>

h3. flash

Use flash[:key] to set values to be used in the spec.

<ruby>
flash[:notice] = "Press the button!"
</ruby>

Your specs can now check that your view renders the flash message appropriately.

h2. Expectations

Spec::Rails' View Specs support the following custom expectations, all of which
are also available in "controller":controller.html specs when run in "integrate_views" mode.

h3. response.should have_tag

This is built on assert_tag in rails testing:

<ruby>
response.should have_tag('div') #passes if any div tags appear
response.should have_tag('div#interesting_div')
response.should have_tag('div', 'expected content')
response.should have_tag('div', /regexp matching expected content/)
response.should have_tag('ul') do
  with_tag('li', 'list item 1')
  with_tag('li', 'list item 2')
  with_tag('li', 'list item 3')
end
</ruby>

Note that any of the hash values can be either Strings or Regexps and will be
evaluated accordingly.

h2. Example View Specs

<ruby file="../example_rails_app/spec/views/person/list_view_spec.rb"/>
