---
title: Controllers
inMenu: true
---
h2. RSpec on Rails - Specifying Controllers

Controller Specs live in ~/spec/controllers/.

h2. Isolation from views

RSpec on Rails 0.7.0 introduces the ability to specify your controllers in complete
isolation from their related views. This allows you to spec your controllers
before the views even exist, and will keep the specs from failing when there
are errors in your views.

h2. Optional integration with views

If you prefer to integrate views (a la rails functional testing) you can by including
the keyword/commmand "integrate_views".

<ruby>
context "a context" do
  integrate_views
  specify "something" do
    ...
  end
end
</ruby>

When you integrate views in the controller specs, you can use any of the
expectations that are specific to views as well. Read about "View Specs":views.html
to learn more.

h2. Isolation from the database

We strongly recommend that you use RSpec's "mocking/stubbing framework":../../mocks/index.html
to intercept class level calls like <code>:find</code>, <code>:create</code> and
even <code>:new</code> to introduce mock instances instead of real active_record instances.

This allows you focus your specs on the things that the controller does and not
worry about complex validations and relationships that should be spec'd in
detail in the "Model Specs":models.html

<ruby>
account = mock("account")
Account.should_receive(:find).with("37").and_return(account)
</ruby>

or

<ruby>
account = mock("account")
Account.stub!(:find).and_return(account)
</ruby>

See "Mocks and Stubs":../../mocks/index.html for more information about the
built in mocking/stubbing framework.

h2. Controller Expectations

These expectations will work whether in isolation or integration mode.

h3. controller.should_render

Use this to set an expectation in advance of the action:

<ruby>
controller.should_render :template = "path/to/template/for/action"
get 'action'
</ruby>

You can specify :template, :text, or :action.

<ruby>
controller.should_render :template = "path/to/template/for/action"
controller.should_render :text = "expected text"
controller.should_render :action = "expected_action"
</ruby>

h3. controller.should_have_rendered

Use this to verify an expectation after an action:

<ruby>
get 'action'
controller.should_have_rendered :template = "path/to/template/for/action"
</ruby>

Like should_render above, you can specify :template, :text, or :action.

h3. controller.should_render_rjs

Thanks to Jake Howerton's port (for RSpec) of "Kevin Clark's ARTS library":http://glu.ttono.us/articles/2006/05/29/guide-test-driven-rjs-with-arts (for test/unit), you can specify
calls made in your rjs templates.

<ruby>
controller.should_render_rjs :replace_html, 'mydiv', 'replacement text'
controller.should_render_rjs :replace_html, 'mydiv', /replace/
controller.should_render_rjs :insert_html, 'mydiv', 'replacement text'
controller.should_render_rjs :insert_html, 'mydiv', /place ex/
controller.should_render_rjs :replace, 'mydiv', '<div>replacement text</div>'
controller.should_render_rjs :replace, 'mydiv', /placement/
controller.should_render_rjs :hide, 'mydiv'
</ruby>

It also supports the page['element'] format as follows:

<ruby>
controller.should_render_rjs :page, 'mydiv', :replace_html, 'replacement text'
controller.should_render_rjs :page, 'mydiv', :replace_html, /replace/
controller.should_render_rjs :page, 'mydiv', :insert_html, 'replacement text'
controller.should_render_rjs :page, 'mydiv', :insert_html, /place ex/
controller.should_render_rjs :page, 'mydiv', :replace, '<div>replacement text</div>'
controller.should_render_rjs :page, 'mydiv', :replace, /placement/
controller.should_render_rjs :page, 'mydiv', :hide
</ruby>

h3. controller.should_redirect_to

<ruby>
controller.should_redirect_to :action => 'other_action'
controller.should_redirect_to 'path/to/local/redirect'
controller.should_redirect_to 'http://test.host/some_controller/some_action
controller.should_redirect_to 'http://some.other.domain.com'
</ruby>

h3. assigns

<ruby>
assigns(:person).should_eql Person.new(:name => "Joe Smith")
</ruby>

h2. Response Expectations

These are intended to be used in integration mode (integrate_views), as they involve
header status codes that are generated when attempting to render a file.

In isolation mode, these will not break, but since there is no response being rendered,
they don't really tell you much (i.e. they're sort of a false positive).

h3. response.should_be_success

Passes if a status of 200 was returned.

<ruby>
response.should_be_success
</ruby>

h3. response.should_be_redirect

We recommend that you use controller.should_redirect_to 'destination' instead.

Passes if a status of 300-399 was returned.

<ruby>
response.should_be_redirect
</ruby>

h2. Example Controller Specs

<ruby file="../vendor/rspec_on_rails/spec/controllers/person_controller_spec.rb"/>
