---
title: RSpec on Rails - Overview
inMenu: true
---
h2. RSpec on Rails - Overview

A Rails plugin that brings RSpec to Rails.

h3. Features

* Use RSpec to independently specify models, views, controllers and helpers
* Integrated fixture loading
* Special generators for models and controllers that generate specs instead of tests.

h3. Vision

For people for whom TDD is a brand new concept, the testing support built into rails is a huge
leap forward. The fact that it's built right in is fantastic, and rails
apps are generally much easier to maintain than they would have been without such support.

For those of us coming from a history with TDD, and now BDD, the existing support
presents some problems related to dependencies across specs. To that end, RSpec
supports 5 types of specs. This is largely inspired by (and actually extends)
Test::Rails, which is the rails testing framework built into "ZenTest":http://zentest.rubyforge.org. 
We've also built in first class mocking
and stubbing support in order to break dependencies across these different concerns.

Here are the 5 types of specs:

* "Model Specs":writing/models.html. These are the equivalent of unit tests in Rails'' built in testing. Ironically
(for the traditional TDD'er) these are the only specs that we feel should actually interact
with the database.
* "Controller Specs":writing/controllers.html. These align somewhat with functional tests in rails, except
that they do not actually render views (though you can force rendering of views
if you prefer). Instead of setting expectations about what goes on a page, you
set expectations about what templates get rendered.
* "View Specs":writing/views.html. This is the other half of Rails'' functional testing. View specs allow
you to set up assigns (thanks to ZenTest).
* "Helper Specs":writing/helpers.html let you specify directly methods that live in your helpers.
* "Integration Specs":writing/integration.html (not yet in 0.7.0)


h3. Naming conventions

For clarity and consistency, RSpec uses a slightly different naming convention
for directories and Rake tasks than what you get from the Test::Unit testing built into rails.

<ruby>
project
  |
  +--app
  |
  +--components
  |
  +--...
  |
  +--spec
      |
      +-- controllers
      |
      +-- helpers
      |
      +-- models
      |
      +-- views
</ruby>

The Rake tasks are named accordingly.