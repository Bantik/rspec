---
title: Mock API
inMenu: true
---
h2. Mock API

RSpec contains a full featured Mock Objects framework.

h3. Creating a mock

<pre>
mock(<name>)
</pre>

This creates a new mock with the given name (a string) and registers it. When the specification finishes, all registered mocks are verified.

<pre>
mock(<name>, <options>)
</pre>

As above, but allows you to specific options to tweak the mock's behaviour. The <code>options</code> argument is a hash. Currently the only supported option is <code>:null_object</code>. Setting this to true (i.e. <code>:null_object => true</code>) instructs the mock to ignore (quietly consume) any messages it hasn't been told to expect.

h3. Expecting Messages

<pre>
mock.should.receive(<message>)
</pre>

The <code>message</code> argument is a symbol that is the name of a message that you want
the mock to be expecting.

h3. Arbitrary Message Receive Handling

You can supply a block to a message expectation. When the message is received
by the mock, the block is evaluated, and passed any arguments. The result is
the return value of the message. For example:

<pre>
@mock.should.receive(:random_call) {| a | a.should.be true}
</pre>

This allows arbitrary argument validation and result computation.

h3. Expecting Arguments

<pre>
mock.should.receive(:msg).with(<args>)
mock.should.receive(:msg).with(1, 2, 3)
</pre>

The <code>args</code> argument is a series of arguments (e..g. 1, 2, 3) that are expected
to be passed as arguments to the associated message.

<pre>
mock.should.receive(:msg).with(:no_args)
</pre>

No arguments are to be accepted by the message.

<pre>
mock.should.receive(:msg).with(:any_args)
</pre>

Any arguments are to be accepted by the message. This includes cases where no
arguments are provided. *This is the default when no <code>with()</code> clause is
specified.*  Even so, sometimes you want to be explicit about it.

h3. Argument Constraints

Constraints can be placed on individual arguments which are looser than value equivalence.

h4. :anything

accepts any value for this argument

<pre>
mock.should.receive(:msg).with(1, :anything, "A")
</pre>

h4. :numeric

accepts any numeric value for this argument

<pre>
mock.should.receive(:msg).with(a, :numeric, "b")
</pre>

h4. :boolean

accepts a boolean value for this argument

<pre>
mock.should.receive(:msg).with(a, :boolean, "b")
</pre>

h4. :string

accepts any string for this argument

<pre>
mock.should.receive(:msg).with(a, :string, "b")
</pre>
	
h4. duck_type(message(s))

accepts any object that responds to the prescribed message(s)

<pre>
#accepts a Fixnum for the second arg
mock.should.receive(:msg).with(a, duck_type(:abs, :div), "b") 
</pre>

h3. Receive Counts

<pre>
mock.should.receive(:msg).never
</pre>

A problem is reported if the message is ever received.

<pre>
mock.should.receive(:msg).any.number.of.times
</pre>

The message can be received 0 or more times.

<pre>
mock.should.receive(:msg).once
</pre>

A problem is reported is the message is never received, or it is received more
than once.

<pre>
mock.should.receive(:msg).twice
</pre>

A problem is reported is the message is received anything but two times.

<pre>
mock.should.receive(:msg).exactly(n).times
</pre>

A problem is reported is the message is received anything but n times.

<pre>
mock.should.receive(:msg).at.least(:once)
</pre>

A problem is reported if the message is never received.

<pre>
mock.should.receive(:msg).at.least(:twice)
</pre>

A problem is reported is the message is never received or is received only once.

<pre>
mock.should.receive(:msg).at.least(n).times
</pre>

A problem is reported is the message is received fewer than n times.

h3. Return Values

<pre>
mock.should.receive(:msg).once.and.return(<value>)
</pre>

When the expected message is received, <code>value</code> will be returned as the result.

<pre>
and.return([<value-1>, <value-2>, ..., <value-n>])
</pre>

When the expected message is received, <code>value-i</code> will be returned as the result
for the ith reception of the message. Once <code>i > n</code>, <code>value-n</code> is returned for all
subsequent receives of the message.

<pre>
mock.should.receive(:msg).once.and.return {...} 
</pre>

When the expected message is received, the result of evaluating the supplied
block will be returned as the result. The block is passed any arguments passed
as parts of the message. This capability can be used to compute return values
based on the arguments.  For example:

<pre>
mock.should.receive(:msg).once.and.return {|a, b| a + b}
</pre>

h3. Raising and Throwing

<pre>
mock.should.receive(:msg).once.and.raise(<exception>)
mock.should.receive(:msg).once.and.throw(<symbol>) 
</pre>

These instruct the mock to raise an exception or throw a symbol instead of returning a value.

h3. Yielding

<pre>
mock.should.receive(:msg).once.and.yield([<value-1>, <value-2>, ..., <value-n>])
</pre>

When the expected message is received, the mock will yield the values to the passed block.

h3. Ordering

There are times when you want to specify the order of messages sent to a mock.
It shouldn't be the case very often, but it can be handy at time. There are
two parts to specifying the ordering between two expectations: labeling one
expectation, and specifying that an other expectation should follow it.

Labeling expectations is done by assigning it a symbol label with the <code>id</code> call:

<pre>
mock.should.receive(:flip).once.id(:first)
</pre>

Now other expectations can refer to it with the <code>after</code> call:

<pre>
mock.should.receive(:flop).once.after(:first)
</pre>

If the send of <code>flop</code> is seen before <code>flop</code> the specification will fail.

Of course, chains of ordered expectations can be set up:

<pre>
@mock.should.receive(:one).id(:one)
@mock.should.receive(:two).id(:two).after(:one)
@mock.should.receive(:three).after(:two)
</pre>