---
title: RSpec on Rails
inMenu: true
---
h2. RSpec on Rails

A Rails plugin that brings RSpec to Rails.

h3. Features

* Use RSpec to verify models and controllers
* Integrated fixture loading
* Special generators for models and controllers that generate specs instead of tests.

h3. Pre-Installation
You'll have to install the RSpec core gem first:

<pre>
gem install rspec
</pre>

Take note of what rspec version you're installing - it's very important that you
install a compatible RSpec on Rails plugin.

h3. Installation

RSpec on Rails is a regular Rails plugin. It can be installed via your Rails app's script/plugin tool.
In the examples below - make sure you replace TAG with the version of the plugin you want to install.
It's important that the REL_X_Y_Z corresponds to the version of RSpec core you have installed - for example
REL_0_5_16.

<pre>
ruby script/plugin install svn://rubyforge.org/var/svn/rspec/tags/REL_X_Y_Z/vendor/rspec_on_rails/vendor/plugins/rspec
</pre>

Or if you like to live dangerously you can get the HEAD of the trunk:

<pre>
ruby script/plugin install svn://rubyforge.org/var/svn/rspec/trunk/vendor/rspec_on_rails/vendor/plugins/rspec
</pre>

If your own project is in Subversion and you'd like RSpec on Rails to always follow HEAD, install with -x:

<pre>
ruby script/plugin install -x svn://rubyforge.org/var/svn/rspec/trunk/vendor/rspec_on_rails/vendor/plugins/rspec
</pre>

Once the plugin is installed, you must bootstrap your Rails app with RSpec. Stand in the root of your Rails app and run:

<pre>
ruby script/generate rspec
</pre>

This will generate the various files needed to use RSpec with Rails.

h3. Using the generators

RSpec on Rails contains generators that you can use to generate models and controllers 
in a similar fashion to Rails' builtin generators, but will generate specs instead of tests
and will put fixtures under the spec folder. Example:

<pre>
ruby script/generate rspec_model person
</pre>

or

<pre>
ruby script/generate rspec_controller person
</pre>

For more information on each generator, just run them without any arguments.

h3. Running specs

All specs can be run with

<pre>
rake spec
</pre>

Model specs can be run with

<pre>
rake spec:models
</pre>

Controller specs can be run with

<pre>
rake spec:controllers
</pre>

To see all the RSpec related tasks, run

<pre>
rake --tasks spec
</pre>

You can also run specs 'directly' with

<pre>
spec path/to/my/spec.rb
</pre>

But we recommend you use the faster rails_spec tool when working with Rails.

h3. Running specs faster with rails_spec

Loading the entire Rails environment every time a spec is executed is quite slow.
We have therefore made a little tool that allows you to load the rails environment
once for all. In a separate shell, run:

<pre>
script/rails_spec_server
</pre>

-And then in a separate shell:

<pre>
script/rails_spec REGULAR_SPEC_OPTIONS
</pre>

The script/rails_spec script has the same command line interface as the familiar spec
command. But it's MUCH faster.

h3. Naming conventions

When you use Rails without RSpec (with Test::Unit), tests for models end up in tests/unit and tests for controllers
end up in tests/functional.

In order to make things more consistent, RSpec chooses a slightly different naming convention for directories and
Rake tasks. So you will find model specs under specs/models, controller specs under specs/controllers, and view specs under specs/views. The
Rake tasks are named accordingly.

h3. Examples

RSpec on Rails adds several methods to your specs with a look and feel similar to Test::Unit. Example:

Model:
<ruby file="../vendor/rspec_on_rails/spec/models/person_spec.rb"/>

Controller:
<ruby file="../vendor/rspec_on_rails/spec/controllers/person_controller_spec.rb"/>

h3. Other Notes

Some rails-isms don't read too well in the context of some expectation forms.  For example, to set an expectation on the number of records for a particular model, you would write:

<ruby>
ModelClass.should_have(4).find(:all)
</ruby>

To help with that we've added a method to ActiveRecord::Base, so now you can write:

<ruby>
ModelClass.should_have(4).records
</ruby>

h3. Translating existing Test::Unit tests

The test2spec tool that ships with RSpec translates existing tests into RSpec specs. 
Translating tests to specs in a Rails environment requires some manual steps...

h4. Install RSpec on Rails

How to do this is described above.

h4. Modify your test/test_helper.rb

In order to be able to translate any Rails tests, you must modify your test/test_helper.rb file:

<pre>
# This line must be commented out in order for test2spec to work.
# require 'test_help'
require 'test2spec_help'
</pre>

The reason for this is that the <tt>test_help</tt> mixin confuses test2spec to the point
where it's unable to perform the translation. The <tt>test2spec_help</tt> addresses this
shortcoming.

h4. Perform the translations

Now you can translate your unit tests (model tests) with "test2spec":test2spec.html:

<pre>
test2spec --template vendor/plugins/rspec/test2spec.erb --specdir spec/models test/unit
</pre>

and your functional tests (controller tests) with:

<pre>
test2spec --template vendor/plugins/rspec/test2spec.erb --specdir spec/controllers test/functional
</pre>

h4. Edit your translated specs

test2spec currently doesn't translate class-level statements such as <tt>fixtures</tt>, so you have 
to add those statements manually. Copy all the <tt>fixtures</tt> statements in your tests to the 
corresponding contexts. Example:

<ruby>
context "The Foo Model" do
  fixtures :foo
end
</ruby>

h4. Make sure fixtures are found.

By default, RSpec on Rails expects to find fixtures under <tt>spec/fixtures</tt>. You should either move your
existing <tt>test/fixtures/*.yml</tt> files to <tt>spec/fixtures</tt> or edit your <tt>spec/spec_helper.rb</tt>
to point to the old <tt>test/fixtures</tt> location. Beware that every time you do a <tt>script/generate rspec_model</tt>,
new fixtures will always be written to <tt>spec/fixtures</tt>.
