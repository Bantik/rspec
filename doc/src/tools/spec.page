---
title: Spec Runner
inMenu: true
---

h2. Executing specs directly

Every RSpec context can be run directly from the command line:

<pre>
$ ruby path/to/my_spec.rb [options]
</pre>

This will print the results to STDOUT. Use the --help option for more details. This is
practical when you only want to run one context. If you want to run more, use the spec tool
or the Rake task.

h2. The spec command line

After you install RSpec, you should have the <tt>spec</tt> command line tool on your PATH.
This tool can be used to process several RSpec contexts in one go. 

Any number of files, directories and shell globs can be provided, all ruby source files
that are found are loaded. Running spec on the previous example results in:

<pre>
$ spec examples

{execute: cd ../rspec ; bin/spec examples}
</pre>

Very simple and to the point. Passing specifications are indicated by a '.',
failing ones by a 'F'. Note that failure indicates a violated expectation as
well as an unexpected exception being raised.  Here's an example with a failing specification:

<pre>
$ spec failing_examples/stack_spec.rb

{execute: cd ../rspec ; bin/spec failing_examples/team_spec.rb}
</pre>

h2. Command line options

When you run <tt>spec</tt> with the <tt>--help</tt> option it prints a help message:

<pre>
$ spec --help

{execute: cd ../rspec ; bin/spec --help}
</pre>

The command line options can be passed to customize the output and behaviour of RSpec.
The options apply whether specs are run in standalone mode (by executing the .rb files directly with ruby), 
or using the spec command.

h3. --diff

This option tells RSpec to print a unified diff of any Strings that are expected to be equal,
but are not. This is especially handy when comparing large Strings. Example:

<ruby file="../rspec/failing_examples/diffing_spec.rb" />

And the output using <tt>--diff</tt>

<pre>
$ spec failing_examples/diffing_spec.rb --diff

{execute: cd ../rspec ; bin/spec failing_examples/diffing_spec.rb --diff}
</pre>

If you want to use the <tt>--diff</tt> option, you must also gem install diff-lcs. You
do *not* need a native diff command line tool, so this is Windows-friendly.

h3. -c, --color, --colour

Show coloured (red/green) output.

h3. -s, --spec &lt;name of context and/or specification&gt;

Enter the name of a context, spec, or both to run:

all the specs in a context ...

<pre>
$ spec examples --spec "A stack which is neither empty nor full" -f s

{execute: cd ../rspec ; bin/spec examples --spec "A stack which is neither empty nor full" -f s}
</pre>

... any spec in any context with a given name ...

<pre>
$ spec examples --spec "should return the top item when sent 'pop'" -f s

{execute: cd ../rspec ; bin/spec examples --spec "should return the top item when sent 'pop'" -f s}
</pre>

... or a specific spec in a specific context:

<pre>
$ spec examples --spec "A stack which is neither empty nor full should return the top item when sent 'pop'" -f s

{execute: cd ../rspec ; bin/spec examples --spec "A stack which is neither empty nor full should return the top item when sent 'pop'" -f s}
</pre>

h3. -l, --line

The --line option is similar to --spec, except that you tell RSpec exactly where the spec
you want to run is. When using --line you must specify exactly one spec file, and you must
not use it in conjunction with --spec.

<pre>
$ spec examples/stack_spec.rb --line 16 -f s

{execute: cd ../rspec ; bin/spec examples/stack_spec.rb --line 16 -f s}
</pre>


h3. -f, --format [specdoc|s|rdoc|r|html|h]

Specify the output format. Default format is "progress bar" ("." for pass, "F" for fail). Most other formats will produce some form of "testdox":http://agiledox.sourceforge.net/
output (we call it specdoc). The --dry-run option may also affect the output format.

For example, by setting the formatter to rdoc, we can output the kind of input that RDoc
needs to produce something like "this":../rdoc/files/EXAMPLES_rd.html 

<pre>
$ spec failing_examples/team_spec.rb -f rdoc

{execute: cd ../rspec ; bin/spec failing_examples/team_spec.rb -f rdoc}
</pre>

You can also output an "HTML report":failing_examples.html

<pre>
$ spec failing_examples -f html > my_report.html
</pre>

h4. Custom formatters

As of RSpec 0.5.7 custom formatters are supported. If the argument to the --format option is none
of the builtin formatters, RSpec will assume it's a class name, and try to instantiate that class.
If you're using this feature, make sure to use the --require option as well - *before* the
--format option.

See the RDoc for "Spec::Runner::BaseTextFormatter":../rdoc/classes/Spec/Runner/BaseTextFormatter.html 
for details on how to implement your own. A custom formatter can be found under examples/custom_formatter.rb.

h3. -r, --require FILE

Causes FILE to be loaded (via require) before any specs are executed. If you're using a custom
formatter, you have to specify this option *before* the --format option.

h3. -b, --backtrace

In order to make it easier to identify causes of failing specifications, RSpec will filter out
the parts of the backtrace that come from RSpec itself by default. If you wish to see them,
you can use -b or --backtrace:

<pre>
$ spec failing_examples/team_spec.rb -b

{execute: cd ../rspec ; bin/spec failing_examples/team_spec.rb -b}
</pre>

h3. -H, --heckle CODE

If all specs pass, this will run your specs many times, mutating
the specced code a little each time. The intent is that specs
*should* fail, and RSpec will tell you if they don't.
CODE should be either Some::Module, Some::Class or Some::Fabulous#method}

<pre>
$ spec examples --heckle Stack#pop

{execute: cd ../rspec ; bin/spec examples --heckle Stack#pop}
</pre>

h3. -d, --dry-run

This option tells RSpec not to execute the specs, but they are still being parsed.
This can be useful when generating "testdox-like":http://agiledox.sourceforge.net/ documents

