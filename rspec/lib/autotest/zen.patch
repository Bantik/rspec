Index: rspec.rb
===================================================================
--- rspec.rb	(revision 3268)
+++ rspec.rb	(working copy)
@@ -18,35 +18,20 @@
 class RspecCommandError < StandardError; end
 
 class Autotest::Rspec < Autotest
-  
-  def tests_for_file(filename)
-    super.select { |f| @files.has_key? f }
-  end
-  
-  alias :specs_for_file :tests_for_file
-  
-  def failed_results(results)
-    results.scan(/^\d+\)\n(?:\e\[\d*m)?(?:.*?Error in )?'([^\n]*)'(?: FAILED)?(?:\e\[\d*m)?\n(.*?)\n\n/m)
-  end
 
-  def handle_results(results)
-    @files_to_test = consolidate_failures failed_results(results)
-    unless @files_to_test.empty? then
-      hook :red
-    else
-      hook :green
-    end unless $TESTING
-    @tainted = true unless @files_to_test.empty?
+  def initialize
+    super
+
+    self.failed_results_re = /^\d+\)\n(?:\e\[\d*m)?(?:.*?Error in )?'([^\n]*)'(?: FAILED)?(?:\e\[\d*m)?\n(.*?)\n\n/m
+    self.completed_re = /\Z/ # FIX: some sort of summary line at the end?
   end
 
   def consolidate_failures(failed)
     filters = Hash.new { |h,k| h[k] = [] }
     failed.each do |spec, failed_trace|
-      @files.keys.select{|f| f =~ /spec\//}.each do |f|
-        if failed_trace =~ Regexp.new(f)
-          filters[f] << spec
-          break
-        end
+      if test_files_for(f).find { |f| failed_trace =~ Regexp.new(f) } then
+        filters[f] << spec
+        break
       end
     end
     return filters
@@ -60,19 +45,23 @@
     File.exist?("spec/spec.opts") ? "-O spec/spec.opts " : ""
   end
 
-  # Finds the proper spec command to use.  Precendence
-  # is set in the lazily-evaluated method spec_commands.  Alias + Override
-  # that in ~/.autotest to provide a different spec command
-  # then the default paths provided.
+  # Finds the proper spec command to use.  Precendence is set in the
+  # lazily-evaluated method spec_commands.  Alias + Override that in
+  # ~/.autotest to provide a different spec command then the default
+  # paths provided.
   def spec_command
-    @spec_command ||= spec_commands.each do |command|
-      if File.exists?(command)
-        return @alt_separator ? (command.gsub @separator, @alt_separator) : command
-      end
+    unless defined? @spec_command then
+      @spec_command = spec_commands.find { |cmd| File.exists? cmd }
+
+      raise RspecCommandError, "No spec command could be found!" unless
+        @spec_command
+
+      @spec_command.gsub! File::SEPARATOR, File::ALT_SEPARATOR if
+        File::ALT_SEPARATOR
     end
-    raise RspecCommandError, "No spec command could be found!"
+    @spec_command
   end
-  
+
   # Autotest will look for spec commands in the following
   # locations, in this order:
   #
@@ -84,5 +73,4 @@
       File.join(Config::CONFIG['bindir'], 'spec')
     ]
   end
-
 end


Diffs between working revision and workfile end here.