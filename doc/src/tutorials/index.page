---
title: Overview
---
h2. A Simple Stack - Overview

h3. A simple, introductory tutorial by David Chelimsky

In this tutorial, we're going to explore the developer practices of Behaviour Driven Development using rSpec. As a developer, the goal of BDD is to think about specifying examples of behaviour rather than testing. We'll explore what that means, and how it affects the process of specifying components in a system. 

One example I've used when teaching TDD isa Stack. It would typically start with a test like this:

<ruby>
#NOT A BDD EXAMPLE
def test_new_stack_should_be_empty
  stack = Stack.new
  assert_equal(0, stack.size)
end
</ruby>

We start with that because it is a VERY simple place to start. To get that test to pass, you need very little code...

<ruby>
class Stack
  def size
    0
  end
end
</ruby>

...and you're off and running. So here's a question: what is the <em><b>behaviour</b></em> that is exhibited by <code>size</code>? You could say that the stack is answering the question correctly. But then the question becomes "what is the question?"

Think of it this way: does size really matter? For a client of a Stack, probably not. Most clients probably care about whether they can push something on to the stack, or pop something off of it. But knowing whether it has 0 or 1000 items is only helpful if the client knows what those numbers mean. And that often requires asking more questions. For example, let's say we want to push but we want to check if we can first:

<ruby>
stack.push item if stack.size < stack.capacity
</ruby>

Instead, we could ask if the stack is full...

<ruby>
stack.push item unless stack.full?
</ruby>

Now that is something useful to clients, and that's the point. We want to think about how clients can use the object, not how the object will go about satisfying its clients' needs.

"Tell, Don't Ask" is a powerful guideline, but sometimes you have to ask questions. So let's extend TDA with this: "...but if you MUST ask, then ask for what you really need". Do we need to know the stack's size? Probably not. We <em>do</em>, however, need to know whether we can push onto it.

We'll be exploring these questions in this tutorial in addition to getting you started with rSpec. So <a href="stack_01.html">let's get started!</a>