---
title: Overview
---
h2. Mocks and Stubs

RSpec supports three types of mocking/stubbing:

h3. Mock Objects

<a href="mocks.html">Mock Objects</a> are more or less anonymous instances (they are of type Mock) that
allow you to set and verify expectations. They are very useful for specifying how the subject of
the spec interacts with its collaborators. This approach is widely known as "interaction
testing" in the TDD community.

Mock Objects are also very powerful (though less widely understood) as a design tool. As you are
driving the implementation of a given class, Mock Objects provide an amorphous
collaborator that can change in behaviour as quickly as you can write an expectation in your
spec. These changes are tantamount to designing the interface to a collaborator that often
does not yet exist. As the shape of the class being specified becomes more clear, so do the
requirements for its collaborators - often leading to the discovery of new types that are
needed in your system.

Read "Endo-Testing":http://www.mockobjects.com/files/endotesting.pdf for a much
more in depth description of this process.

h3. Partial Mocks

"Partial Mocks":partial_mocks.html is a facility that allows
you to expect and verify messages sent to a pre-existing Class object. This is generally
something to be avoided, because changes to the class can have ripple effects on
seemingly unrelated specs. When specs fail due to these ripple effects, the fact
that some methods are being mocked can make it difficult to understand why a
failure is occurring.

That said, "Partial Mocks":partial_mocks.html do allow you to expect and
verify interactions with class methods such as <code>:find</code> and <code>:create</code>
on Ruby on Rails model classes.

h3. Method Stubs

In RSpec, "Method Stubs":stubs.html are not objects themselves, but rather a facility that allows you
to set dummy return values on existing objects without any verification. This works for any pre-existing
instance or class (including an instance of Mock).

h3. Notes

There are many different viewpoints about the meaning of mocks and stubs. If you are interested
in learning more, here is some recommended reading:

* Mock Objects: "http://www.mockobjects.com/":http://www.mockobjects.com/
* Endo-Testing:"http://www.mockobjects.com/files/endotesting.pdf":http://www.mockobjects.com/files/endotesting.pdf
* Mock Roles, Not Objects: "http://www.mockobjects.com/files/mockrolesnotobjects.pdf":http://www.mockobjects.com/files/mockrolesnotobjects.pdf
* Test Double Patterns: "http://xunitpatterns.com/Test%20Double%20Patterns.html":http://xunitpatterns.com/Test%20Double%20Patterns.html
* Mocks aren't stubs: "http://www.martinfowler.com/articles/mocksArentStubs.html":http://www.martinfowler.com/articles/mocksArentStubs.html
