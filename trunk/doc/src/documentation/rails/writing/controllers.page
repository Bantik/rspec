---
title: Controllers
inMenu: true
---
h2. Spec::Rails - Specifying Controllers

Controller Specs live in $RAILS_ROOT/spec/controllers/.

h2. Isolation from views

Spec::Rails 0.7 introduces the ability to specify your controllers in complete
isolation from their related views. This allows you to spec your controllers
before the views even exist, and will keep the specs from failing when there
are errors in your views.

h2. Optional integration with views

If you prefer to integrate views (a la rails functional testing) you can by including
the keyword/commmand "integrate_views".

<ruby>
describe ArticlesController do
  integrate_views
  ...
end
</ruby>

When you integrate views in the controller specs, you can use any of the
expectations that are specific to views as well. Read about "View Specs":views.html
to learn more.

h2. Isolation from the database

We strongly recommend that you use RSpec's "mocking/stubbing framework":../../mocks/index.html
to intercept class level calls like <code>:find</code>, <code>:create</code> and
even <code>:new</code> to introduce mock instances instead of real active_record instances.

This allows you focus your specs on the things that the controller does and not
worry about complex validations and relationships that should be spec'd in
detail in the "Model Specs":models.html

<ruby>
account = mock("account")
Account.should_receive(:find).with("37").and_return(account)
</ruby>

or

<ruby>
account = mock("account")
Account.stub!(:find).and_return(account)
</ruby>

See "Mocks and Stubs":../../mocks/index.html for more information about the
built in mocking/stubbing framework.

h2. Response Expectations

These expectations will work whether in isolation or integration mode. See "Spec::Rails::Expectations":../../../rdoc-rails/index.html for details.

h3. response.should be_success

Passes if a status of 200 was returned. NOTE that in isolation mode, this will
always return true, so it's not that useful - but at least your specs won't break.

<ruby>
response.should be_success
</ruby>

h3. response.should be_redirect

Passes if a status of 300-399 was returned.

<ruby>
response.should be_redirect
</ruby>

h3. response.should render_template

<ruby>
get 'some_action'
response.should render_template("path/to/template/for/action")
</ruby>

h3. response.should render_text

<ruby>
get 'some_action'
response.should render_text("expected text")
</ruby>

h3. response.should redirect_to

<ruby>
get 'some_action'
response.should redirect_to(:action => 'other_action')
</ruby>

The following forms are supported:

<ruby>
response.should redirect_to(:action => 'other_action')
response.should redirect_to('path/to/local/redirect')
response.should redirect_to('http://test.host/some_controller/some_action')
response.should redirect_to('http://some.other.domain.com')
</ruby>

h3. assigns, flash and session

Use these to access assigns, flash and session.

<ruby>
assigns[:key]
flash[:key]
session[:key]
</ruby>

h2. Routing Expectations

Specify the paths generated by custom routes.

<ruby>
route_for(:controller => "hello", :action => "world").should == "/hello/world"
</ruby>

h2. Example Controller Specs

<ruby file="../example_rails_app/spec/controllers/people_controller_spec.rb"/>
