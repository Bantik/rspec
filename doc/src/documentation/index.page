---
title: Contexts
---
h2. Contexts and Specifications

Rather than expressing examples in classes, RSpec uses a custom
Domain Specific Language to express
examples using contexts and specifications.

A context is the equivalent of a fixture in xunit-speak. It is a metaphor for the context
in which you will run your executable example - a set of known objects in a known starting state.

<ruby>
context "A new account" do

  setup do
    @account = Account.new
  end

  specify "should have a balance of $0" do
    @account.balance.should_equal Money.new(0, :dollars)
  end

end
</ruby>

We use the setup block to set up the context (given), and then the specify method to
hold the example code that expresses the event (when) and the expected outcome (then).

h3. Helper Methods

A primary goal of RSpec is to keep the examples clear. We therefore prefer
less indirection than you might see in xunit examples and in well factored, DRY production code. We feel
that duplication is OK if removing it makes it harder to understand an example without
having to look elsewhere to understand its context.

That said, RSpec does support some level of encapsulating common code in helper
methods that can exist within a context or within an included module.

IT IS IMPORTANT TO NOTE, however, that these approaches are somewhat experimental, and
may be removed from future releases in favor of new approaches that better support clarity
and consistency while still supporting some level of indirection.

h4. Local helper methods

You can include local helper methods by simply expressing them within a context:

<ruby>
context "A new account" do

  setup do
    @account = Account.new
  end

  specify "should have a balance of $0" do
    helper_method
    @account.balance.should_equal Money.new(0, :dollars)
  end
  
  def helper_method
    ...
  end

end
</ruby>

h4. Included helper methods

You can include helper methods in multiple contexts by expressing them within
a module, and then including that module in your context:

<ruby>
module AccountExampleHelperMethods
  def helper_method
    ...
  end
end

context "A new account" do
  include AccountExampleHelperMethods
  setup do
    @account = Account.new
  end

  specify "should have a balance of $0" do
    helper_method
    @account.balance.should_equal Money.new(0, :dollars)
  end
end
</ruby>